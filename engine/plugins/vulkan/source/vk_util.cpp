#include "vk_util.hpp"

namespace violet::vk
{
VkFormat vk_util::map_format(rhi_resource_format format)
{
    switch (format)
    {
    case RHI_RESOURCE_FORMAT_UNDEFINED:
        return VK_FORMAT_UNDEFINED;
    case RHI_RESOURCE_FORMAT_R8_UNORM:
        return VK_FORMAT_R8_UNORM;
    case RHI_RESOURCE_FORMAT_R8_SNORM:
        return VK_FORMAT_R8_SNORM;
    case RHI_RESOURCE_FORMAT_R8_UINT:
        return VK_FORMAT_R8_UINT;
    case RHI_RESOURCE_FORMAT_R8_SINT:
        return VK_FORMAT_R8_SINT;
    case RHI_RESOURCE_FORMAT_R8G8_UNORM:
        return VK_FORMAT_R8G8_UNORM;
    case RHI_RESOURCE_FORMAT_R8G8_SNORM:
        return VK_FORMAT_R8G8_SNORM;
    case RHI_RESOURCE_FORMAT_R8G8_UINT:
        return VK_FORMAT_R8G8_UINT;
    case RHI_RESOURCE_FORMAT_R8G8_SINT:
        return VK_FORMAT_R8G8_SINT;
    case RHI_RESOURCE_FORMAT_R8G8B8_UNORM:
        return VK_FORMAT_R8G8B8_UNORM;
    case RHI_RESOURCE_FORMAT_R8G8B8_SNORM:
        return VK_FORMAT_R8G8B8_SNORM;
    case RHI_RESOURCE_FORMAT_R8G8B8_UINT:
        return VK_FORMAT_R8G8B8_UINT;
    case RHI_RESOURCE_FORMAT_R8G8B8_SINT:
        return VK_FORMAT_R8G8B8_SINT;
    case RHI_RESOURCE_FORMAT_R8G8B8A8_UNORM:
        return VK_FORMAT_R8G8B8A8_UNORM;
    case RHI_RESOURCE_FORMAT_R8G8B8A8_SNORM:
        return VK_FORMAT_R8G8B8A8_SNORM;
    case RHI_RESOURCE_FORMAT_R8G8B8A8_UINT:
        return VK_FORMAT_R8G8B8A8_UINT;
    case RHI_RESOURCE_FORMAT_R8G8B8A8_SINT:
        return VK_FORMAT_R8G8B8A8_SINT;
    case RHI_RESOURCE_FORMAT_B8G8R8A8_UNORM:
        return VK_FORMAT_B8G8R8A8_UNORM;
    case RHI_RESOURCE_FORMAT_B8G8R8A8_SNORM:
        return VK_FORMAT_B8G8R8A8_SNORM;
    case RHI_RESOURCE_FORMAT_B8G8R8A8_UINT:
        return VK_FORMAT_B8G8R8A8_UINT;
    case RHI_RESOURCE_FORMAT_B8G8R8A8_SINT:
        return VK_FORMAT_B8G8R8A8_SINT;
    case RHI_RESOURCE_FORMAT_B8G8R8A8_SRGB:
        return VK_FORMAT_B8G8R8A8_SRGB;
    case RHI_RESOURCE_FORMAT_R32_UINT:
        return VK_FORMAT_R32_UINT;
    case RHI_RESOURCE_FORMAT_R32_SINT:
        return VK_FORMAT_R32_SINT;
    case RHI_RESOURCE_FORMAT_R32_FLOAT:
        return VK_FORMAT_R32_SFLOAT;
    case RHI_RESOURCE_FORMAT_R32G32_UINT:
        return VK_FORMAT_R32G32_UINT;
    case RHI_RESOURCE_FORMAT_R32G32_SINT:
        return VK_FORMAT_R32G32_SINT;
    case RHI_RESOURCE_FORMAT_R32G32_FLOAT:
        return VK_FORMAT_R32G32_SFLOAT;
    case RHI_RESOURCE_FORMAT_R32G32B32_UINT:
        return VK_FORMAT_R32G32B32_UINT;
    case RHI_RESOURCE_FORMAT_R32G32B32_SINT:
        return VK_FORMAT_R32G32B32_SINT;
    case RHI_RESOURCE_FORMAT_R32G32B32_FLOAT:
        return VK_FORMAT_R32G32B32_SFLOAT;
    case RHI_RESOURCE_FORMAT_R32G32B32A32_UINT:
        return VK_FORMAT_R32G32B32A32_UINT;
    case RHI_RESOURCE_FORMAT_R32G32B32A32_SINT:
        return VK_FORMAT_R32G32B32A32_SINT;
    case RHI_RESOURCE_FORMAT_R32G32B32A32_FLOAT:
        return VK_FORMAT_R32G32B32A32_SFLOAT;
    case RHI_RESOURCE_FORMAT_D24_UNORM_S8_UINT:
        return VK_FORMAT_D24_UNORM_S8_UINT;
    case RHI_RESOURCE_FORMAT_D32_FLOAT:
        return VK_FORMAT_D32_SFLOAT;
    default:
        return VK_FORMAT_UNDEFINED;
    }
}

rhi_resource_format vk_util::map_format(VkFormat format)
{
    switch (format)
    {
    case VK_FORMAT_R8_UNORM:
        return RHI_RESOURCE_FORMAT_R8_UNORM;
    case VK_FORMAT_R8_SNORM:
        return RHI_RESOURCE_FORMAT_R8_SNORM;
    case VK_FORMAT_R8_UINT:
        return RHI_RESOURCE_FORMAT_R8_UINT;
    case VK_FORMAT_R8_SINT:
        return RHI_RESOURCE_FORMAT_R8_SINT;
    case VK_FORMAT_R8G8_UNORM:
        return RHI_RESOURCE_FORMAT_R8G8_UNORM;
    case VK_FORMAT_R8G8_SNORM:
        return RHI_RESOURCE_FORMAT_R8G8_SNORM;
    case VK_FORMAT_R8G8_UINT:
        return RHI_RESOURCE_FORMAT_R8G8_UINT;
    case VK_FORMAT_R8G8_SINT:
        return RHI_RESOURCE_FORMAT_R8G8_SINT;
    case VK_FORMAT_R8G8B8_UNORM:
        return RHI_RESOURCE_FORMAT_R8G8B8_UNORM;
    case VK_FORMAT_R8G8B8_SNORM:
        return RHI_RESOURCE_FORMAT_R8G8B8_SNORM;
    case VK_FORMAT_R8G8B8_UINT:
        return RHI_RESOURCE_FORMAT_R8G8B8_UINT;
    case VK_FORMAT_R8G8B8_SINT:
        return RHI_RESOURCE_FORMAT_R8G8B8_SINT;
    case VK_FORMAT_R8G8B8A8_UNORM:
        return RHI_RESOURCE_FORMAT_R8G8B8A8_UNORM;
    case VK_FORMAT_R8G8B8A8_SNORM:
        return RHI_RESOURCE_FORMAT_R8G8B8A8_SNORM;
    case VK_FORMAT_R8G8B8A8_UINT:
        return RHI_RESOURCE_FORMAT_R8G8B8A8_UINT;
    case VK_FORMAT_R8G8B8A8_SINT:
        return RHI_RESOURCE_FORMAT_R8G8B8A8_SINT;
    case VK_FORMAT_B8G8R8A8_UNORM:
        return RHI_RESOURCE_FORMAT_B8G8R8A8_UNORM;
    case VK_FORMAT_B8G8R8A8_SNORM:
        return RHI_RESOURCE_FORMAT_B8G8R8A8_SNORM;
    case VK_FORMAT_B8G8R8A8_UINT:
        return RHI_RESOURCE_FORMAT_B8G8R8A8_UINT;
    case VK_FORMAT_B8G8R8A8_SINT:
        return RHI_RESOURCE_FORMAT_B8G8R8A8_SINT;
    case VK_FORMAT_B8G8R8A8_SRGB:
        return RHI_RESOURCE_FORMAT_B8G8R8A8_SRGB;
    case VK_FORMAT_R32_UINT:
        return RHI_RESOURCE_FORMAT_R32_UINT;
    case VK_FORMAT_R32_SINT:
        return RHI_RESOURCE_FORMAT_R32_SINT;
    case VK_FORMAT_R32_SFLOAT:
        return RHI_RESOURCE_FORMAT_R32_FLOAT;
    case VK_FORMAT_R32G32_UINT:
        return RHI_RESOURCE_FORMAT_R32G32_UINT;
    case VK_FORMAT_R32G32_SINT:
        return RHI_RESOURCE_FORMAT_R32G32_SINT;
    case VK_FORMAT_R32G32_SFLOAT:
        return RHI_RESOURCE_FORMAT_R32G32_FLOAT;
    case VK_FORMAT_R32G32B32_UINT:
        return RHI_RESOURCE_FORMAT_R32G32B32_UINT;
    case VK_FORMAT_R32G32B32_SINT:
        return RHI_RESOURCE_FORMAT_R32G32B32_SINT;
    case VK_FORMAT_R32G32B32_SFLOAT:
        return RHI_RESOURCE_FORMAT_R32G32B32_FLOAT;
    case VK_FORMAT_R32G32B32A32_UINT:
        return RHI_RESOURCE_FORMAT_R32G32B32A32_UINT;
    case VK_FORMAT_R32G32B32A32_SINT:
        return RHI_RESOURCE_FORMAT_R32G32B32A32_SINT;
    case VK_FORMAT_R32G32B32A32_SFLOAT:
        return RHI_RESOURCE_FORMAT_R32G32B32A32_FLOAT;
    case VK_FORMAT_D24_UNORM_S8_UINT:
        return RHI_RESOURCE_FORMAT_D24_UNORM_S8_UINT;
    case VK_FORMAT_D32_SFLOAT:
        return RHI_RESOURCE_FORMAT_D32_FLOAT;
    default:
        return RHI_RESOURCE_FORMAT_UNDEFINED;
    }
}

VkSampleCountFlagBits vk_util::map_sample_count(rhi_sample_count samples)
{
    switch (samples)
    {
    case RHI_SAMPLE_COUNT_1:
        return VK_SAMPLE_COUNT_1_BIT;
    case RHI_SAMPLE_COUNT_2:
        return VK_SAMPLE_COUNT_2_BIT;
    case RHI_SAMPLE_COUNT_4:
        return VK_SAMPLE_COUNT_4_BIT;
    case RHI_SAMPLE_COUNT_8:
        return VK_SAMPLE_COUNT_8_BIT;
    case RHI_SAMPLE_COUNT_16:
        return VK_SAMPLE_COUNT_16_BIT;
    case RHI_SAMPLE_COUNT_32:
        return VK_SAMPLE_COUNT_32_BIT;
    default:
        return VK_SAMPLE_COUNT_1_BIT;
    }
}

VkImageLayout vk_util::map_state(rhi_resource_state state)
{
    switch (state)
    {
    case RHI_RESOURCE_STATE_SHADER_RESOURCE:
        return VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
    case RHI_RESOURCE_STATE_RENDER_TARGET:
        return VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
    case RHI_RESOURCE_STATE_PRESENT:
        return VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
    default:
        return VK_IMAGE_LAYOUT_UNDEFINED;
    }
}
} // namespace violet::vk